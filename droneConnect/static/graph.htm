<!doctype html>
<html><head><style> 

	html { 	background: rgb(40,40,40); } 

</style>
    <script src="/js/two.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/dat.gui.min.js"></script>
</head><body><script>

   /* #########################################################################################

             ####  #   #   #
            #      #   #   #
            #  ##  #   #   #
            #   #  #   #   #
             ###    ###    #
        
            // GUI FROM http://workshop.chromeexperiments.com/examples/gui/
    */


var Drone = function() {
  this.P = 84.0; 
  this.I = 6.0;  
  this.D = 26.0;
  this.motor0 = 1000.0;
  this.motor1 = 1000.0;
  this.motor2 = 1000.0;
  this.motor3 = 1000.0;
  this.throttle = 1000.0;
  this.hardlimit = 1060.0;
  this.maglock = false;

  //remember to use .toFixed() to convert to string! Its parsed on the other end as a string
  this.uploadPID = function() { 
        socket.emit('drone', {cmd: "pidset", P: this.P.toFixed(5), I: this.I.toFixed(5), D: this.D.toFixed(5)});
    }  
  this.uploadHardlimit = function() { 
        socket.emit('drone', {cmd: "hardlimit", val: this.hardlimit.toFixed(5)});
    }      
};

var dronecontrol = {};

window.onload = function() {
  dronecontrol = new Drone()
  var gui = new dat.GUI()
  gui.add(dronecontrol, 'throttle', 1000.0, 2000.0).listen();
  var hardlimit = gui.add(dronecontrol, 'hardlimit', 1000.0, 2000.0).listen();
  gui.add(dronecontrol, 'motor0', 1000.0, 2000.0).listen();
  gui.add(dronecontrol, 'motor1', 1000.0, 2000.0).listen();
  gui.add(dronecontrol, 'motor2', 1000.0, 2000.0).listen();
  gui.add(dronecontrol, 'motor3', 1000.0, 2000.0).listen();
  var pgui = gui.add(dronecontrol, 'P', 0.0, 300.0).step(0.1)
  var igui = gui.add(dronecontrol, 'I', 0.0, 170.0).step(0.1)
  var dgui = gui.add(dronecontrol, 'D', 0.0, 170.0).step(0.1)

  hardlimit.onFinishChange(function(value) {
    dronecontrol.uploadHardlimit();
  })

  pgui.onFinishChange( function(value) {
    dronecontrol.uploadPID();
  })
  igui.onFinishChange( function(value) {
    dronecontrol.uploadPID();
  })
  dgui.onFinishChange( function(value) {
    dronecontrol.uploadPID();
  })

  
};





var two = new Two({
fullscreen: true,
autostart: true,
type: Two.Types.webgl
}).appendTo(document.body);

//gray center line
two.makeLine(0, two.height / 2, two.width, (two.height / 2)).stroke ="rgba(155, 155, 155, 0.5)"

two.bind('update', function() {        
  //for on new frame stuff
});

var counter = 0;

var gyro0 = makegraph("rgba(125, 125, 125, 225)"); //RED
var gyro1 = makegraph("rgba(255, 0, 0, 225)");  
var heading = makegraph("rgba(0, 255, 55, 225)"); //GREEN
/*
var compassxgraph = makegraph("rgba(255, 50, 50, 225)");
var compassygraph = makegraph("rgba(50, 255, 50, 225)");
var compasszgraph = makegraph("rgba(50, 50, 255, 225)");
*/



/* #########################################################################################

      ####   ###    ####  #  #  #####  #####  
     #      #   #  #      # #   #        #     
      ###   #   #  #      ##    ###      #    
         #  #   #  #      # #   #        #    
     ####    ###    ####  #  #  #####    #   
*/
var socket = io.connect();

socket.on('locator', function (data) {
  updategraph(gyro0, parseFloat(data.arm0[2])*300);
  updategraph(gyro1, parseFloat(data.arm1[2])*300); //RED
  updategraph(heading, parseFloat(data.headingdiff)*300);
	dronecontrol.motor0 = data.motorthrottles[0]
	dronecontrol.motor1 = data.motorthrottles[1]
	dronecontrol.motor2 = data.motorthrottles[2]
	dronecontrol.motor3 = data.motorthrottles[3]
})


/* ######################################################################################### */









/* #########################################################################################

            #  #   #  ####   #   #  #####                                 
            #  ##  #  #   #  #   #    #
            #  # # #  ####   #   #    #                                                              
            #  #  ##  #      #   #    #                                                                
            #  #   #  #       ###     #                                                       
*/
    //document.addEventListener( 'mousedown', mouseDown, false );
    //document.addEventListener( 'mouseup', mouseUp, false );
    //document.addEventListener( 'mousemove', mouseMove, false );
    document.addEventListener( 'keydown', keyDown, false );
    document.addEventListener( 'keyup', keyUp, false );    

function keyDown(key) { 
        console.log(key.which)
        if (key.which == 84) { //T - takeoff/arm/spinup/clean
            throttle = 63; 
            socket.emit('drone', {cmd: "takeoff"});             
        }                
        if (key.which == 76) { //L - land
            throttle = 0; 
            socket.emit('drone', {cmd: "land"});             
        }         
        if (key.which == 80) { //P - PID on - stabilizer
            socket.emit('drone', {cmd: "pidon"});             
        }      
        if (key.which == 87) { //W throttle
            dronecontrol.throttle += 5;
            socket.emit('drone', {cmd: "throttle", val: dronecontrol.throttle.toFixed(3)});             
        }   
        if (key.which == 83) { //S throttle
            if (dronecontrol.throttle > 1000) {
              dronecontrol.throttle -= 5;  
            }
            socket.emit('drone', {cmd: "throttle", val: dronecontrol.throttle.toFixed(3)});             
        }        
    }

 function keyUp(key) {       
    
    }

/* ######################################################################################### */

function makegraph(color) {
  var graphobj = {};
  graphobj.line = []
  graphobj.dataarray  = [];
  for (var a = 0; a < 500; a++) {
    var point = new Two.Anchor(a*2, 0); 
    graphobj.line.push(point)
    graphobj.dataarray.push(0)
  }

  var twoGraph = two.makePolygon(graphobj.line, true)
  twoGraph.translation.set(two.width / 2, two.height / 2); 
  twoGraph.noFill();
  twoGraph.stroke = color;
  return graphobj
}

function updategraph(graph, data) {
  graph.dataarray.pop() //chops off old
  graph.dataarray.splice(0,0,data)  //inserts into array start

  //loops over array and updates graph
  for (var a = 0; a < 500; a++) {
    var p = Math.abs(250 - a)
    graph.line[a].y = graph.dataarray[p] 
  }
}

</script></body></html>